{"mappings":"AAAA;AACA,MAAM;IACF,YAAY,IAAI,EAAE,KAAK,CAAE;QACrB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,WAAW;QACP,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;IAC1C;AACJ;AACA,MAAM;IACF,aAAc;QACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY;QAC7B,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS;IAC9B;IACA,eAAe;QACX,MAAM,QAAQ;YAAC;YAAU;YAAY;YAAS;SAAS;QACvD,MAAM,SAAS;YAAC;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;SAAK;QAC7D,MAAM,OAAO,EAAE;QACf,KAAK,IAAI,QAAQ,MACb,KAAK,IAAI,SAAS,OACd,KAAK,IAAI,CAAC,IAAI,KAAK,MAAM;QAGjC,OAAO;IACX;IACA,cAAc;QACV,IAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,IAAK;YAC3C,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAM,CAAA,IAAI,CAAA;YAC1C,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;gBAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAAE,IAAI,CAAC,IAAI,CAAC,EAAE;aAAC;QAC/D;IACJ;IACA,YAAY;QACR,MAAM,OAAO,EAAE;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACnB,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;QAE3B,OAAO;IACX;IACA,gBAAgB,YAAY,EAAE;QAC1B,aAAa,SAAS,GAAG;QACzB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAK;YACvC,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;YACzB,MAAM,cAAc,SAAS,aAAa,CAAC;YAC3C,YAAY,SAAS,CAAC,GAAG,CAAC;YAC1B,YAAY,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,GAAG;YAChC,YAAY,SAAS,GAAG,KAAK,QAAQ;YACrC,aAAa,WAAW,CAAC;QAC7B;IACJ;AACJ;AACA,MAAM,gBAAgB,SAAS,aAAa,CAAC;AAC7C,MAAM,YAAY,SAAS,aAAa,CAAC;AACzC,MAAM,kBAAkB,SAAS,aAAa,CAAC;AAC/C,MAAM,gBAAgB,SAAS,aAAa,CAAC;AAC7C,MAAM,OAAO,IAAI;AACjB,KAAK,eAAe,CAAC;AACrB,cAAc,gBAAgB,CAAC,SAAS;IACpC,OAAO,IAAI;IACX,KAAK,eAAe,CAAC;AACzB","sources":["src/index.js"],"sourcesContent":["\"use strict\";\nclass Card {\n    constructor(suit, value) {\n        this.suit = suit;\n        this.value = value;\n    }\n    toString() {\n        return `${this.value} of ${this.suit}`;\n    }\n}\nclass Game {\n    constructor() {\n        this.deck = this.generateDeck();\n        this.shuffleDeck();\n        this.hand = this.dealCards();\n    }\n    generateDeck() {\n        const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];\n        const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10'];\n        const deck = [];\n        for (let suit of suits) {\n            for (let value of values) {\n                deck.push(new Card(suit, value));\n            }\n        }\n        return deck;\n    }\n    shuffleDeck() {\n        for (let i = this.deck.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];\n        }\n    }\n    dealCards() {\n        const hand = [];\n        for (let i = 0; i < 4; i++) {\n            hand.push(this.deck.pop());\n        }\n        return hand;\n    }\n    renderGameBoard(boardElement) {\n        boardElement.innerHTML = '';\n        for (let i = 0; i < this.hand.length; i++) {\n            const card = this.hand[i];\n            const cardElement = document.createElement('div');\n            cardElement.classList.add('card');\n            cardElement.id = `card-${i + 1}`;\n            cardElement.innerHTML = card.toString();\n            boardElement.appendChild(cardElement);\n        }\n    }\n}\nconst gameContainer = document.querySelector('.game-container');\nconst gameBoard = document.querySelector('.game-board');\nconst attemptsElement = document.querySelector('#attempts');\nconst newGameButton = document.querySelector('#new-game');\nconst game = new Game();\ngame.renderGameBoard(gameBoard);\nnewGameButton.addEventListener('click', () => {\n    game = new Game();\n    game.renderGameBoard(gameBoard);\n});\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}